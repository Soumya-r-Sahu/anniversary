#!/usr/bin/env node

const fs = require('fs');
const path = require('path');

console.log('🔄 Starting Anniversary Website v4.0.0 File Reorganization...');

// Define the new structure
const baseDir = __dirname.replace('/scripts', '');
const srcDir = path.join(baseDir, 'src');

const newStructure = {
  'src/pages/js': path.join(srcDir, 'pages', 'js'),
  'src/pages/css': path.join(srcDir, 'pages', 'css'),
  'src/pages/react': path.join(srcDir, 'pages', 'react'),
  'src/pages/html': path.join(srcDir, 'pages', 'html')
};

// Create new directories
console.log('\n📁 Creating new directory structure...');
Object.entries(newStructure).forEach(([label, dirPath]) => {
  if (!fs.existsSync(dirPath)) {
    fs.mkdirSync(dirPath, { recursive: true });
    console.log(`✅ Created: ${label}`);
  } else {
    console.log(`📁 Exists: ${label}`);
  }
});

// Function to move files based on extension
function moveFilesByExtension(sourceDir, mapping) {
  if (!fs.existsSync(sourceDir)) {
    console.log(`⚠️  Source directory not found: ${sourceDir}`);
    return;
  }

  console.log(`\n🔍 Processing directory: ${sourceDir}`);
  const files = fs.readdirSync(sourceDir, { withFileTypes: true });
  
  let movedCount = 0;
  files.forEach(file => {
    if (file.isFile()) {
      const ext = path.extname(file.name).toLowerCase();
      const sourcePath = path.join(sourceDir, file.name);
      
      let targetDir;
      switch (ext) {
        case '.js':
          targetDir = newStructure['src/pages/js'];
          break;
        case '.css':
          targetDir = newStructure['src/pages/css'];
          break;
        case '.jsx':
        case '.tsx':
          targetDir = newStructure['src/pages/react'];
          break;
        case '.html':
          targetDir = newStructure['src/pages/html'];
          break;
        default:
          console.log(`⚠️  Unknown extension: ${ext} for file: ${file.name}`);
          return;
      }
      
      const targetPath = path.join(targetDir, file.name);
      
      try {
        // Copy instead of move to preserve originals during testing
        fs.copyFileSync(sourcePath, targetPath);
        console.log(`📄 Copied: ${file.name} → ${path.relative(srcDir, targetDir)}`);
        movedCount++;
      } catch (error) {
        console.error(`❌ Error copying ${file.name}:`, error.message);
      }
    }
  });
  
  console.log(`✅ Processed ${movedCount} files from ${sourceDir}`);
}

// Move files from existing directories
console.log('\n🔄 Moving React pages...');
moveFilesByExtension(path.join(srcDir, 'pages'), newStructure);

console.log('\n🔄 Moving HTML pages...');
moveFilesByExtension(path.join(srcDir, 'pages-html'), newStructure);

console.log('\n🔄 Moving CSS files from styles/pages...');
const pagesStylesDir = path.join(srcDir, 'styles', 'pages');
if (fs.existsSync(pagesStylesDir)) {
  moveFilesByExtension(pagesStylesDir, newStructure);
}

console.log('\n🔄 Moving JS files from scripts/pages...');
const pagesScriptsDir = path.join(srcDir, 'scripts', 'pages');
if (fs.existsSync(pagesScriptsDir)) {
  moveFilesByExtension(pagesScriptsDir, newStructure);
}

// Create index files for each directory
console.log('\n📝 Creating directory index files...');
Object.entries(newStructure).forEach(([label, dirPath]) => {
  const indexPath = path.join(dirPath, 'README.md');
  const dirName = path.basename(dirPath);
  const content = `# ${dirName.toUpperCase()} Files

This directory contains all ${dirName} files for the Anniversary Website v4.0.0.

## Structure
- Organized by file extension for better maintainability
- Part of the new v4.0.0 architecture
- Each file serves a specific purpose in the anniversary celebration

## Usage
${dirName === 'react' ? '- Import React components from this directory' : ''}
${dirName === 'html' ? '- Standalone HTML pages for direct access' : ''}
${dirName === 'css' ? '- Page-specific styles and styling' : ''}
${dirName === 'js' ? '- JavaScript functionality and interactions' : ''}

Generated by Anniversary Website v4.0.0 reorganization script.
`;
  
  if (!fs.existsSync(indexPath)) {
    fs.writeFileSync(indexPath, content);
    console.log(`📄 Created: ${path.relative(srcDir, indexPath)}`);
  }
});

// Generate summary report
console.log('\n📊 Reorganization Summary:');
console.log('==========================');

Object.entries(newStructure).forEach(([label, dirPath]) => {
  const files = fs.existsSync(dirPath) ? 
    fs.readdirSync(dirPath).filter(f => f !== 'README.md') : [];
  console.log(`${label}: ${files.length} files`);
  if (files.length > 0) {
    files.forEach(file => console.log(`  - ${file}`));
  }
});

console.log('\n✅ File reorganization complete!');
console.log('\n📁 New structure created:');
console.log('src/pages/');
console.log('├── js/       # JavaScript files');
console.log('├── css/      # CSS files');
console.log('├── react/    # React components (.jsx, .tsx)');
console.log('└── html/     # HTML files');

console.log('\n🚀 Next steps:');
console.log('1. Update import paths in React components');
console.log('2. Update build configuration');
console.log('3. Test all functionality');
console.log('4. Deploy and validate');
